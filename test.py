# !/usr/bin/env python
# -*-coding:utf-8 -*-

"""
# File       : test.py
# Time       ：2022/4/11 19:16
# Author     ：caoxu
# version    ：python 3.9
# Description：
"""
import os
from collections import Counter
from enum import Enum
import tablib


def is_image_file(filename):
    return any(filename.endswith(extension) for extension in ['.png', '.jpg', '.jpeg', '.PNG', '.JPG', '.JPEG'])


class VersionSortID(Enum):
    CamisoleTops = 10
    CamiSpaghettiTops = 20
    CamiTops = 30
    PaddedTops = 40
    TankTops = 50


if __name__ == '__main__':
    # a = [1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6]
    # print(a[0:10])
    # print(a[10:20])
    # for i in range(int(108 / 100) + 1):
    #     print(i* 100)
    #     print( (i+1) * 100)

    # res_pid_sims = {1: [(37000, 1.0000001192092896), (37005, 1.0000001192092896), (37004, 0.8950221538543701),
    #      (98004, 0.8950221538543701), (86002, 0.8894596099853516), (86005, 0.8894596099853516),
    #      (37007, 0.8836937546730042), (37004, 0.878534197807312), (37006, 0.878534197807312),
    #      (86006, 0.8209097385406494), (86003, 0.8209097385406494), (55004, 0.7414226531982422),
    #      (55002, 0.7414226531982422), (101001, 0.7326796054840088), (27005, 0.7290778160095215),
    #      (60003, 0.7290072441101074), (85001, 0.7280310392379761), (52003, 0.7250196933746338),
    #      (60002, 0.7211570739746094), (11002, 0.7210717797279358), (37011, 1.0), (37003, 1.0),
    #      (37001, 0.8033868074417114), (37010, 0.8033868074417114), (37012, 0.7718607783317566),
    #      (64009, 0.7447134256362915), (64007, 0.7447134256362915), (20001, 0.7369898557662964),
    #      (21003, 0.7320046424865723), (21004, 0.7284634113311768), (21001, 0.7284634113311768),
    #      (94002, 0.7262916564941406), (76002, 0.7262548208236694), (20002, 0.726186990737915),
    #      (24002, 0.7224075794219971), (94001, 0.7222606539726257), (64001, 0.7177783250808716),
    #      (24003, 0.7162154316902161), (43002, 0.715859055519104), (56001, 0.7114852666854858),
    #      (37007, 0.9999998807907104), (37004, 0.8874272108078003), (37006, 0.8874272108078003),
    #      (98004, 0.8871309757232666), (98002, 0.8871309757232666), (86005, 0.8871047496795654),
    #      (86002, 0.8871047496795654), (37005, 0.8836937546730042), (37008, 0.8836937546730042),
    #      (86003, 0.8318507671356201), (86006, 0.8318507671356201), (15001, 0.7331185340881348),
    #      (21002, 0.7250217795372009), (27005, 0.7224175930023193), (60003, 0.7183025479316711),
    #      (38002, 0.714532732963562), (55004, 0.7138943672180176), (55002, 0.7138943672180176),
    #      (18001, 0.713340699672699), (57002, 0.7114330530166626), (37001, 1.0), (37010, 1.0),
    #      (37012, 0.886154055595398), (37011, 0.8033868074417114), (37003, 0.8033868074417114),
    #      (15003, 0.7789148092269897), (67005, 0.7754764556884766), (67007, 0.7754764556884766),
    #      (20002, 0.7749989628791809), (67000, 0.7721246480941772), (41003, 0.7705742120742798),
    #      (21004, 0.7697957754135132), (21001, 0.7697957754135132), (106002, 0.7627338171005249),
    #      (106006, 0.7627338171005249), (76002, 0.7626059055328369), (86004, 0.7607225179672241),
    #      (86007, 0.7607225179672241), (86001, 0.7607225179672241), (77002, 0.7605389952659607), (37011, 1.0),
    #      (37003, 1.0), (37001, 0.8033868074417114), (37010, 0.8033868074417114), (37012, 0.7718607783317566),
    #      (64009, 0.7447134256362915), (64007, 0.7447134256362915), (20001, 0.7369898557662964),
    #      (21003, 0.7320046424865723), (21004, 0.7284634113311768), (21001, 0.7284634113311768),
    #      (94002, 0.7262916564941406), (76002, 0.7262548208236694), (20002, 0.726186990737915),
    #      (24002, 0.7224075794219971), (94001, 0.7222606539726257), (64001, 0.7177783250808716),
    #      (24003, 0.7162154316902161), (43002, 0.715859055519104), (56001, 0.7114852666854858), (37009, 1.0),
    #      (37002, 1.0), (86001, 0.973926305770874), (86007, 0.973926305770874), (86004, 0.973926305770874),
    #      (98003, 0.9439036846160889), (98005, 0.9439036846160889), (98001, 0.9439036846160889),
    #      (86000, 0.84537273645401), (63003, 0.8434631824493408), (63004, 0.8434631824493408),
    #      (107004, 0.8369427919387817), (45003, 0.8328102827072144), (45004, 0.8328102827072144),
    #      (49005, 0.8310798406600952), (49001, 0.8310798406600952), (49007, 0.8310798406600952),
    #      (55003, 0.8309264183044434), (55005, 0.8309264183044434), (25003, 0.8279806971549988), (37001, 1.0),
    #      (37010, 1.0), (37012, 0.886154055595398), (37011, 0.8033868074417114), (37003, 0.8033868074417114),
    #      (15003, 0.7789148092269897), (67005, 0.7754764556884766), (67007, 0.7754764556884766),
    #      (20002, 0.7749989628791809), (67000, 0.7721246480941772), (41003, 0.7705742120742798),
    #      (21004, 0.7697957754135132), (21001, 0.7697957754135132), (106002, 0.7627338171005249),
    #      (106006, 0.7627338171005249), (76002, 0.7626059055328369), (86004, 0.7607225179672241),
    #      (86007, 0.7607225179672241), (86001, 0.7607225179672241), (77002, 0.7605389952659607),
    #      (37004, 0.9999998807907104), (37006, 0.9999998807907104), (86002, 0.9537049531936646),
    #      (86005, 0.9537049531936646), (98004, 0.9453914165496826), (98002, 0.9453914165496826),
    #      (86003, 0.8971208333969116), (86006, 0.8971208333969116), (37007, 0.8874272108078003),
    #      (37008, 0.878534197807312), (37005, 0.878534197807312), (11002, 0.7488620281219482),
    #      (27005, 0.7450339198112488), (55004, 0.7436900734901428), (55002, 0.7436900734901428),
    #      (85001, 0.734727144241333), (60002, 0.7297345995903015), (60002, 0.7287017107009888),
    #      (27002, 0.7277809381484985), (27004, 0.7277809381484985), (37008, 1.0000001192092896),
    #      (37005, 1.0000001192092896), (98002, 0.8950221538543701), (98004, 0.8950221538543701),
    #      (86002, 0.8894596099853516), (86005, 0.8894596099853516), (37007, 0.8836937546730042),
    #      (37004, 0.878534197807312), (37006, 0.878534197807312), (86006, 0.8209097385406494),
    #      (86003, 0.8209097385406494), (55004, 0.7414226531982422), (55002, 0.7414226531982422),
    #      (101001, 0.7326796054840088), (27005, 0.7290778160095215), (60003, 0.7290072441101074),
    #      (85001, 0.7280310392379761), (52003, 0.7250196933746338), (60002, 0.7211570739746094),
    #      (11002, 0.7210717797279358), (37004, 0.9999998807907104), (37006, 0.9999998807907104),
    #      (86002, 0.9537049531936646), (86005, 0.9537049531936646), (98004, 0.9453914165496826),
    #      (98002, 0.9453914165496826), (86003, 0.8971208333969116), (86006, 0.8971208333969116),
    #      (37007, 0.8874272108078003), (37008, 0.878534197807312), (37005, 0.878534197807312),
    #      (11002, 0.7488620281219482), (27005, 0.7450339198112488), (55004, 0.7436900734901428),
    #      (55002, 0.7436900734901428), (85001, 0.734727144241333), (60002, 0.7297345995903015),
    #      (60002, 0.7287017107009888), (27002, 0.7277809381484985), (27004, 0.7277809381484985),
    #      (37012, 0.9999999403953552), (37010, 0.886154055595398), (37001, 0.886154055595398),
    #      (67002, 0.7911698818206787), (67001, 0.7911698818206787), (67006, 0.7911698818206787),
    #      (67000, 0.777966320514679), (67007, 0.7777940630912781), (67005, 0.7777940630912781),
    #      (86004, 0.7756799459457397), (86007, 0.7756799459457397), (86001, 0.7756799459457397),
    #      (37011, 0.7718607783317566), (37003, 0.7718607783317566), (41003, 0.7694475054740906),
    #      (77007, 0.7694298028945923), (77006, 0.7694298028945923), (77002, 0.7694298028945923),
    #      (15003, 0.7680022120475769), (100003, 0.7661248445510864), (37009, 1.0), (37002, 1.0),
    #      (86001, 0.973926305770874), (86007, 0.973926305770874), (86004, 0.973926305770874),
    #      (98003, 0.9439036846160889), (98005, 0.9439036846160889), (98001, 0.9439036846160889),
    #      (86000, 0.84537273645401), (63003, 0.8434631824493408), (63004, 0.8434631824493408),
    #      (107004, 0.8369427919387817), (45003, 0.8328102827072144), (45004, 0.8328102827072144),
    #      (49005, 0.8310798406600952), (49001, 0.8310798406600952), (49007, 0.8310798406600952),
    #      (55003, 0.8309264183044434), (55005, 0.8309264183044434), (25003, 0.8279806971549988)]}
    #
    # for pid, sim_infos in res_pid_sims.items():
    #     sim_infos.sort(key=lambda x: x[1], reverse=True)
    #     id_list = []
    #     sim_id_list = []
    #     for sim_info in sim_infos:
    #         if int(sim_info[0] / 1000) not in id_list:
    #             id_list.append(int(sim_info[0] / 1000))
    #             sim_id_list.append((int(sim_info[0] / 1000), sim_info[1]))
    #     sim_id_list.sort(key=lambda x: x[1], reverse=True)
    #     result = sim_id_list[:20]
    #
    #     for a in result:
    #         print(a[0])
    #         print(a[1])
    #     print(sim_id_list)

    query_img_dir = 'C:/Users/cao/Desktop/WomensTankTops/'
    version_images = [os.path.join(query_img_dir, x) for x in os.listdir(query_img_dir) if is_image_file(x)]
    version_images.sort()
    for i in range(int(len(version_images) / 100) + 1):
        vectors = []
        ids = []
        step_images = version_images[i * 100: (i + 1) * 100]
        for full_img_path in step_images:
            print(full_img_path)
            obj_dir = os.path.dirname(full_img_path) + "/object"
            os.makedirs(obj_dir, exist_ok=True)

    sim_id_list = [1,2,2,4,5,6,7,8,9,2,3,4,3,2,4,5,6,7,4,5,3,2,4,5,6]
    a = len(Counter(sim_id_list))

    image_list = ['https://images-na.ssl-images-amazon.com/images/I/51zbWfs-XvL.jpg',
                  'https://images-na.ssl-images-amazon.com/images/I/51ZzBroXE1L.jpg',
                  'https://images-na.ssl-images-amazon.com/images/I/51ke6OiNS6L.jpg',
                  'https://images-na.ssl-images-amazon.com/images/I/41O7HwKpQ7L.jpg']
    result = {1: {14: 0.6122448979591837, 11: 0.20408163265306123, 41: 0.1836734693877551},
         2: {42: 0.44680851063829785, 14: 0.3191489361702128, 40: 0.23404255319148937},
         3: {14: 0.41379310344827586, 40: 0.3103448275862069, 42: 0.27586206896551724}}
    dataset = tablib.Dataset()
    dataset.headers = ["id", "score"]
    for key, val in result.items():
        dataset.append([image_list[key-1], val])
    with open('result.csv', mode='w', encoding='UTF-8') as f:
        f.write(dataset.csv)

    import time
    print(time.time())
    image_list = ['https://m.media-amazon.com/images/I/71BvR56a5PL._AC_UX569_.jpg',
                  'https://m.media-amazon.com/images/I/617ibXBP57L._AC_UX569_.jpg',
                  'https://m.media-amazon.com/images/I/61DV7pMClWL._AC_UX569_.jpg']
    for idx, image_url in enumerate(image_list, start=1):
        print(idx)
        print(image_url)

    sort_id = VersionSortID['TankTops'].value

    query_img_dir = os.path.join('C:/Users/cao/Desktop/version_images', 'TankTops')
    version_images = [os.path.join(query_img_dir, x) for x in os.listdir(query_img_dir) if is_image_file(x)]

